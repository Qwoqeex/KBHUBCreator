local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

-- Wait for character to exist
local function getCharacter()
    if player.Character then
        return player.Character
    else
        return player.CharacterAdded:Wait()
    end
end

-- Set up camera initial values
camera.CameraType = Enum.CameraType.Scriptable
local defaultOffset = Vector3.new(0, 5, -12)
local distance = defaultOffset.Magnitude  -- initial distance from target
local currentPitch = math.atan2(defaultOffset.Y, math.sqrt(defaultOffset.X^2 + defaultOffset.Z^2))
local currentYaw = math.pi
local minPitch = math.rad(-80)
local maxPitch = math.rad(80)
local sensitivity = 0.01
local minDistance = 2.5
local maxDistance = 100

-- Variables for mouse rotation (desktop)
local rotationActive = false

-- Variables for touch handling (mobile)
local activeTouches = {}       -- stores active touch positions; key: FingerId, value: Vector2
local previousPinchDistance = nil
local touchPinchZoomSpeed = 0.1  -- tuning factor for pinch zoom sensitivity

-- Utility function: count number of active touches
local function getTouchCount()
    local count = 0
    for _ in pairs(activeTouches) do
        count = count + 1
    end
    return count
end

-- InputBegan handler for both mouse and touch
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if gameProcessedEvent then
        return
    end

    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        rotationActive = true
        UserInputService.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition
    elseif input.UserInputType == Enum.UserInputType.Touch then
        -- Store new touch using FingerId as key
        activeTouches[input.FingerId] = input.Position
        -- When two or more fingers are active, reset previous pinch distance for recalculation
        if getTouchCount() >= 2 then
            previousPinchDistance = nil
        end
    end
end)

-- InputEnded handler for both mouse and touch
UserInputService.InputEnded:Connect(function(input, gameProcessedEvent)
    if gameProcessedEvent then
        return
    end

    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        rotationActive = false
        UserInputService.MouseBehavior = Enum.MouseBehavior.Default
    elseif input.UserInputType == Enum.UserInputType.Touch then
        activeTouches[input.FingerId] = nil
        -- When less than two fingers remain, reset previous pinch distance
        if getTouchCount() < 2 then
            previousPinchDistance = nil
        end
    end
end)

-- InputChanged handler for mouse movement, mouse wheel, and touch movement
UserInputService.InputChanged:Connect(function(input, gameProcessedEvent)
    if gameProcessedEvent then
        return
    end

    if input.UserInputType == Enum.UserInputType.MouseMovement then
        if rotationActive then
            currentYaw = currentYaw - input.Delta.X * sensitivity
            currentPitch = currentPitch + input.Delta.Y * sensitivity
            currentPitch = math.clamp(currentPitch, minPitch, maxPitch)
        end
    elseif input.UserInputType == Enum.UserInputType.MouseWheel then
        local zoomSpeed = 2.5
        distance = math.clamp(distance - input.Position.Z * zoomSpeed, minDistance, maxDistance)
    elseif input.UserInputType == Enum.UserInputType.Touch then
        local fingerId = input.FingerId
        local currentPos = input.Position

        if activeTouches[fingerId] then
            local previousPos = activeTouches[fingerId]
            local delta = currentPos - previousPos
            activeTouches[fingerId] = currentPos  -- update to new position

            local touchCount = getTouchCount()
            if touchCount == 1 then
                -- Single-finger rotation: update yaw and pitch
                currentYaw = currentYaw - delta.X * sensitivity
                currentPitch = currentPitch + delta.Y * sensitivity
                currentPitch = math.clamp(currentPitch, minPitch, maxPitch)
            elseif touchCount >= 2 then
                -- Multi-touch: perform pinch zoom
                local touches = {}
                for id, pos in pairs(activeTouches) do
                    table.insert(touches, pos)
                    if #touches == 2 then
                        break
                    end
                end
                local currentPinchDistance = (touches[1] - touches[2]).Magnitude
                if previousPinchDistance then
                    local pinchDelta = currentPinchDistance - previousPinchDistance
                    distance = math.clamp(distance - pinchDelta * touchPinchZoomSpeed, minDistance, maxDistance)
                end
                previousPinchDistance = currentPinchDistance
            end
        else
            activeTouches[fingerId] = currentPos
        end
    end
end)

-- Update camera each frame based on the current settings
local function updateCamera()
    local character = getCharacter()
    local rootPart = character:FindFirstChild("Head")
    if rootPart then
        local targetPos = rootPart.Position
        local offset = Vector3.new(
            distance * math.cos(currentPitch) * math.sin(currentYaw),
            distance * math.sin(currentPitch),
            distance * math.cos(currentPitch) * math.cos(currentYaw)
        )
        local desiredCamPos = targetPos + offset

        -- Check for obstructions using raycasting
        local raycastParams = RaycastParams.new()
        local blacklist = {}
        for _, pl in ipairs(Players:GetPlayers()) do
            if pl.Character then
                table.insert(blacklist, pl.Character)
            end
        end
        raycastParams.FilterDescendantsInstances = blacklist
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

        local direction = desiredCamPos - targetPos
        local raycastResult = workspace:Raycast(targetPos, direction, raycastParams)
        local camPos = desiredCamPos
        if raycastResult then
            local offsetMagnitude = 0.5
            local hitPosition = raycastResult.Position
            local directionUnit = direction.Unit
            camPos = hitPosition - directionUnit * offsetMagnitude
        end

        camera.CFrame = CFrame.new(camPos, targetPos)
    end
end

RunService.RenderStepped:Connect(updateCamera)
